# -*- coding: utf-8 -*-
"""SJSU Data Extraction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zu8nWo_yg8vfJGBnu_Nl9CW9D2JyxbRS
"""

#Waseim was here

!pip install -q tabula-py

import tabula
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import os
from google.colab import files
from google.colab import drive

#manual upload, skip if file is already in drive
tabula.environment_info()

uploaded = files.upload() 

pdf_path = "/content/By Year (Crs Meas).pdf" #copy file path from [files] 

dfs = tabula.read_pdf(pdf_path, stream=True)
# read_pdf returns list of DataFrames
print(len(dfs))
dfs[0]

drive.mount('/content/drive', force_remount=True)
!ls /content/drive/My\ Drive | grep -i Crs

#tabula.environment_info()
#pdf_path='/content/drive/My Drive/By Year (Crs Meas).pdf'
pdf_path='/content/drive/My Drive/SJSU Thingy/'

dfs = tabula.read_pdf(pdf_path+'fall_cs.pdf', stream=True)

print('len: ', len(dfs))
dfs[0]

#correct the header since the header is wrong
arr=dfs[0].to_numpy()
header = ['year', '#sections', 'courses', 'class size', 'seats occupied', 'filled rate', 'SCU'] 

df = pd.DataFrame(arr, columns = header)

#df (dataframe) now shows the correct looking table with the header, ready to be manipulated
#df['class size']

def find_attribute(a, att):
  ans=[]
  for i in a:
    #print(i)
    dfs = tabula.read_pdf(pdf_path+i+'.pdf', stream=True, pages=1)
    arr=dfs[0].to_numpy()

    for i in arr:
      if(type(i[4])==str):
        i[4]=i[4].replace(',','')

    header = ['year', '#sections', 'courses', 'class size', 'seats occupied', 'filled rate', 'SCU'] 

    df = pd.DataFrame(arr, columns = header)
    if(df['year'][0]>=2022):
      df.drop([0], axis=0, inplace=True)
    ans.append(np.array(df[att], dtype=float).tolist())
  return ans

def plot_attribute(a):
  for i in a:
    data=find_attribute(['summer_cs','fall_cs','spring_cs'], i) 
    X = np.arange(10)
    polyline = np.linspace(2011, 2021)
    fig = plt.figure()

    ax = fig.add_axes([0,0,1,1])
    ax.bar(X + 0.00, data[0], color = 'b', width = 0.25)
    ax.bar(X + 0.25, data[1], color = 'g', width = 0.25)
    ax.bar(X + 0.50, data[2], color = 'r', width = 0.25)
    
    plt.title('year vs '+i)
    plt.xlabel('year after 2011')
    plt.ylabel(i)
    plt.xlim(10,0)

    plt.show()

plot_attribute(['seats occupied', 'class size'])

x_axis = 'year'
y_axis = 'class size'

x = np.array(df[x_axis], dtype=float)
y = np.array(df[y_axis], dtype=float)
print(x)
print(y)

#polynomial fit with degree = 1
model1d = np.poly1d(np.polyfit(x, y, 1))

#polynomial fit with degree = 2
model2d = np.poly1d(np.polyfit(x, y, 2))

#polynomial fit with degree = 3
model3d = np.poly1d(np.polyfit(x, y, 3))

#add fitted polynomial line to scatterplot
polyline = np.linspace(2012, 2021) #start at stop for the polyline, for the x_axis

plt.scatter(x, y)
plt.plot(polyline, model1d(polyline), color='red')
plt.plot(polyline, model2d(polyline), color='green')
plt.plot(polyline, model3d(polyline), color='blue')
plt.title("year vs class size")
plt.xlabel(x_axis)
plt.ylabel(y_axis)
plt.show()

values = pd.read_excel(pdf_path+"avgsizebysemester + seatsfilledrate 2016-2021.xlsx")
type(values)
values